package movement;

/**
 * @version 2.1
 */

import javafx.geometry.Orientation;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ColorPicker;
import javafx.scene.layout.FlowPane;
import javafx.scene.paint.Color;
import javafx.stage.Screen;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

public class ToolsStage {

	static Color colour = Color.WHITE;
	private Stage toolsStage = new Stage();
	static int selected = -1;
	private static double initialX, initialY;
	private static boolean dragging = false;
	private static boolean disableDrag = true;
	private MainWindow main;

	ToolsStage(MainWindow main)
	{
		this.main = main;
	}
	
	public Stage getStage() {

		toolsStage.setAlwaysOnTop(true);
		toolsStage.setTitle("Tools");
		toolsStage.setX(0);
		toolsStage.setY(Screen.getPrimary().getVisualBounds().getHeight() - 27);
		toolsStage.initStyle(StageStyle.UNDECORATED);

		FlowPane buttonRoot = new FlowPane(Orientation.HORIZONTAL);
		buttonRoot.setStyle("-fx-background: #343434;");
		Scene buttonScene = new Scene(buttonRoot);

		Button grid = new Button(); // 0
		Button draw = new Button(); // 1
		Button line = new Button(); // 2
		Button angle = new Button(); // 3
		Button drag = new Button();
		ColorPicker cp = new ColorPicker();

		// grid button ID 0
		grid.setGraphic(Images.grid);
		grid.setStyle(Images.style);
		grid.setOnMouseEntered(me -> {
			if (selected != 0)
			{
				if(!GridTool.locked)
					grid.setGraphic(Images.gridMO);
			}
				
		});
		grid.setOnMouseExited(me -> {
			if (selected != 0)
			{
				if(!GridTool.locked)
					grid.setGraphic(Images.grid);
			}
		});
		grid.setOnMouseClicked(me -> {
			if (selected != 0) {
				if(!GridTool.locked)
				{
					grid.setGraphic(Images.gridSel);
					main.grid.paintGrid();
				}
				draw.setGraphic(Images.draw);
				line.setGraphic(Images.line);
				angle.setGraphic(Images.angle);
				//
				
				selected = 0;
				
			} else {
				if(GridTool.locked)
				{
					GridTool.locked = false;
					grid.setGraphic(Images.gridSel);
				}
				else
				{
					GridTool.locked = true;
					grid.setGraphic(Images.gridLoc);
				}
			}
		});

		// draw button ID 1
		draw.setGraphic(Images.draw);
		draw.setStyle(Images.style);
		draw.setOnMouseEntered(me -> {
			if (selected != 1)
				draw.setGraphic(Images.drawMO);
		});
		draw.setOnMouseExited(me -> {
			if (selected != 1)
				draw.setGraphic(Images.draw);
		});
		draw.setOnMouseClicked(me -> {
			if (selected != 1) {
				if(!GridTool.locked)
					grid.setGraphic(Images.grid);
				main.grid.clear();
				draw.setGraphic(Images.drawSel);
				line.setGraphic(Images.line);
				angle.setGraphic(Images.angle);
				
				selected = 1;
			}
		});

		// line button ID 2
		line.setGraphic(Images.line);
		line.setStyle(Images.style);
		line.setOnMouseEntered(me -> {
			if (selected != 2)
				line.setGraphic(Images.lineMO);
		});
		line.setOnMouseExited(me -> {
			if (selected != 2)
				line.setGraphic(Images.line);
		});
		line.setOnMouseClicked(me -> {
			if (selected != 2) {
				if(!GridTool.locked)
					grid.setGraphic(Images.grid);
				draw.setGraphic(Images.draw);
				line.setGraphic(Images.lineSel);
				angle.setGraphic(Images.angle);
				//
				main.grid.clear();
				main.line.getLine().toFront();
				main.line.enable();
				main.angle.disable();
				
				selected = 2;
			}
		});

		// angle button ID 3
		angle.setGraphic(Images.angle);
		angle.setStyle(Images.style);
		angle.setOnMouseEntered(me -> {
			if (selected != 3)
				angle.setGraphic(Images.angleMO);
		});
		angle.setOnMouseExited(me -> {
			if (selected != 3)
				angle.setGraphic(Images.angle);
		});
		angle.setOnMouseClicked(me -> {
			if (selected != 3) {
				if(!GridTool.locked)
					grid.setGraphic(Images.grid);
				draw.setGraphic(Images.draw);
				line.setGraphic(Images.line);
				angle.setGraphic(Images.angleSel);
				//
				main.grid.clear();
				main.angle.getAngle().toFront();
				main.angle.enable();
				main.line.disable();
				
				selected = 3;
			}
		});

		drag.setGraphic(Images.drag);
		drag.setStyle(Images.style);
		drag.setOnMouseDragged(md -> {
			if (!dragging) {
				initialX = md.getSceneX();
				initialY = md.getSceneY();
				dragging = true;
			} else {
				toolsStage.setX(toolsStage.getX() + md.getSceneX() - initialX);
				toolsStage.setY(toolsStage.getY() + md.getSceneY() - initialY);
			}
		});
		drag.setOnMouseDragReleased(md -> dragging = false);
		
		cp.getStyleClass().add("button");
		cp.setStyle("-fx-color-label-visible: false;"
				  + "-fx-background-color: null;"
				  + "-fx-background-color: null;");
		
		cp.setOnAction(ea -> {
			colour = cp.getValue();
		});

		if (disableDrag)
			buttonRoot.getChildren().addAll(grid, draw, line, angle,cp);
		else
			buttonRoot.getChildren().addAll(grid, draw, line, angle,cp, drag);

		toolsStage.setScene(buttonScene);

		return toolsStage;
	}
}
