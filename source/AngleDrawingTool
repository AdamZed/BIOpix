package movement;

/**
 * @version 2.1
 */

import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.*;

public class AngleDrawingTool {

	private Pane root;
	private Line[] lines = { new Line(), new Line() };
	private Circle[] circles = { new Circle(), new Circle(), new Circle() };

	private double lineWid = 2;
	private Color circCol = new Color(1, 1, 0, 0.6);
	private double circRad = 12;

	private Pair current = new Pair();
	private Pair first = new Pair();
	private Pair second = new Pair();
	private Pair third = new Pair();

	AngleCalculator angler = new AngleCalculator();

	boolean firstLine = true;

	public AngleDrawingTool() {

		initialize();

	}

	private void initialize() {

		root = new Pane();
		root.setMinWidth(Images.primaryScreenBounds.getWidth());
		root.setMinHeight(Images.primaryScreenBounds.getHeight());
		root.setLayoutX(0 - root.getLayoutBounds().getMinX());
		root.setLayoutY(0 - root.getLayoutBounds().getMinY());

		for (int i = 0; i < lines.length; i++) {
			lines[i].setStroke(ToolsStage.colour);
			lines[i].setSmooth(true);
			lines[i].setStrokeWidth(lineWid);
			root.getChildren().add(lines[i]);
		}

		for (int i = 0; i < circles.length; i++) {
			circles[i].setCenterX(-50);
			circles[i].setCenterY(-50);
			circles[i].setFill(circCol);
			circles[i].setRadius(circRad);
			root.getChildren().add(circles[i]);
		}

	}

	public void enable() {
		root.setOnMousePressed(mp -> {
			lines[0].setStroke(ToolsStage.colour);
			lines[1].setStroke(ToolsStage.colour);

			if (firstLine) {
				first.setBoth(mp.getSceneX(), mp.getSceneY());
				circles[0].setCenterX(first.getX());
				circles[0].setCenterY(first.getY());
			}

		});

		root.setOnMouseDragged(md -> {

			clear();
			current.setBoth(md.getSceneX(), md.getSceneY());
			if (firstLine) {
				lines[0].setStartX(first.getX());
				lines[0].setStartY(first.getY());
				lines[0].setEndX(current.getX());
				lines[0].setEndY(current.getY());

			} else {
				lines[0].setStartX(first.getX());
				lines[0].setStartY(first.getY());
				lines[0].setEndX(second.getX());
				lines[0].setEndY(second.getY());

				lines[1].setStartX(second.getX());
				lines[1].setStartY(second.getY());
				lines[1].setEndX(current.getX());
				lines[1].setEndY(current.getY());
			}
		});

		root.setOnMouseReleased(mr -> {
			if (firstLine) {
				second.setBoth(mr.getSceneX(), mr.getSceneY());
				lines[0].setStartX(first.getX());
				lines[0].setStartY(first.getY());
				lines[0].setEndX(second.getX());
				lines[0].setEndY(second.getY());

				circles[1].setCenterX(second.getX());
				circles[1].setCenterY(second.getY());

				firstLine = false;
			} else {
				third.setBoth(mr.getSceneX(), mr.getSceneY());
				lines[0].setStartX(first.getX());
				lines[0].setStartY(first.getY());
				lines[0].setEndX(second.getX());
				lines[0].setEndY(second.getY());

				lines[1].setStartX(second.getX());
				lines[1].setStartY(second.getY());
				lines[1].setEndX(third.getX());
				lines[1].setEndY(third.getY());

				circles[2].setCenterX(third.getX());
				circles[2].setCenterY(third.getY());

				System.out.println(angler.getAngle(first, third, second));
				disable();
			}
		});
	}

	public void disable() {
		root.setOnMousePressed(null);
		root.setOnMouseDragged(null);
		root.setOnMouseReleased(null);
	}

	private void clear() {
		lines[0].setStartX(-1);
		lines[0].setStartY(-1);
		lines[0].setEndX(-1);
		lines[0].setEndY(-1);

		lines[1].setStartX(-1);
		lines[1].setStartY(-1);
		lines[1].setEndX(-1);
		lines[1].setEndY(-1);
	}

	void load(Pair first, Pair second, Pair third) {
		this.first = first;
		this.second = second;
		this.third = third;
		lines[0].setStartX(first.getX());
		lines[0].setStartY(first.getY());
		lines[0].setEndX(second.getX());
		lines[0].setEndY(second.getY());

		lines[1].setStartX(second.getX());
		lines[1].setStartY(second.getY());
		lines[1].setEndX(third.getX());
		lines[1].setEndY(third.getY());
		System.out.println(angler.getAngle(first, third, second));
	}

	public Pane getAngle() {
		return root;
	}

}
