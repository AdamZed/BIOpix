package movement;

/**
 * @version 1.0.0
 */

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class AngleDrawingTool extends JComponent {

	private static final long serialVersionUID = 1L;
	private Image image;
	private Graphics2D g2;
	private Pair current = new Pair();
	private Pair first = new Pair();
	private Pair second = new Pair();
	private Pair third = new Pair();
	AngleCalculator angler = new AngleCalculator();
	boolean firstLine = true;

	public AngleDrawingTool() {
		setDoubleBuffered(false);
		addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				if (firstLine) {
					// save coord x,y when mouse is pressed
					first.setX(e.getX());
					first.setY(e.getY());
				}
			}
		});

		addMouseMotionListener(new MouseMotionAdapter() {
			public void mouseDragged(MouseEvent e) {
				// coord x,y when drag mouse
				clear();
				current.setX(e.getX());
				current.setY(e.getY());
				if (firstLine)
					g2.drawLine(first.getX(), first.getY(), current.getX(), current.getY());
				else {
					g2.drawLine(first.getX(), first.getY(), second.getX(), second.getY());
					g2.drawLine(second.getX(), second.getY(), current.getX(), current.getY());
				}
			}
		});

		addMouseListener(new MouseAdapter() {
			public void mouseReleased(MouseEvent e) {
				if (firstLine) {
					second.setX(current.getX());
					second.setY(current.getY());
					g2.drawLine(first.getX(), first.getY(), second.getX(), second.getY());
					firstLine = false;
				} else {
					third.setX(current.getX());
					third.setY(current.getY());
					g2.drawLine(first.getX(), first.getY(), second.getX(), second.getY());
					g2.drawLine(second.getX(), second.getY(), third.getX(), third.getY());
					System.out.println(angler.getAngle(first, third, second));
				}
			}
		});

	}

	protected void paintComponent(Graphics g) {
		if (image == null) {
			// image to draw null ==> we create
			image = createImage(getSize().width, getSize().height);
			g2 = (Graphics2D) image.getGraphics();
			// enable antialiasing
			g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
			// clear draw area
			clear();
		}

		g.drawImage(image, 0, 0, null);
	}

	// now we create exposed methods
	public void clear() {
		g2.setPaint(Color.white);
		// draw white on entire draw area to clear
		g2.fillRect(0, 0, getSize().width, getSize().height);
		g2.setPaint(Color.black);
		repaint();
	}

	public void black() {
		g2.setPaint(Color.black);
	}

}

class SwingPaintAngle {

	JButton clearBtn;
	AngleDrawingTool drawArea;

	ActionListener actionListener = new ActionListener() {
		public void actionPerformed(ActionEvent e) {
			if (e.getSource() == clearBtn) {
				drawArea.clear();
				drawArea.firstLine = true;
			}
		}
	};

	public void main(String[] args) {
		new SwingPaintAngle().show();
	}

	public void show() {
		// create main frame
		JFrame frame = new JFrame("Angle Tool");
		Container content = frame.getContentPane();
		// set layout on content pane
		content.setLayout(new BorderLayout());
		// create draw area
		drawArea = new AngleDrawingTool();

		// add to content pane
		content.add(drawArea, BorderLayout.CENTER);

		// create controls to apply colors and call clear feature
		JPanel controls = new JPanel();

		clearBtn = new JButton("Clear");
		clearBtn.addActionListener(actionListener);
		// add to panel
		controls.add(clearBtn);

		// add to content pane
		content.add(controls, BorderLayout.NORTH);

		frame.setSize(600, 600);
		// can close frame
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		// show the swing paint result
		frame.setVisible(true);

	}

}
